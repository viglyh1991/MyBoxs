
1.单一职责原则, SRP
 > 定义: 就一个类而言，应该仅有一个引起它变化的原因

2. 开放 - 封闭原则, OCP
 > 定义: 软件实体(类、模块、函数等等)应该是可以扩展的，但是不可修改的
 > Open for extension, Closed for modification.
 > 关键是抽象和多态

3. Liskov 替换原则, LSP
 > 定义: 子类必须能够替换掉他们的基类
 > LSP 使 OCP 成为可能, 正是 subtype 的可替换性才使得使用 base type 的模块在无需修改的情况下就可以扩展。
 > IS-A 是关于行为的, 不能作为子类型的定义。正确定义是"可替换性"

4. 依赖倒置原则, DIP
 > 定义: a)高层模块不应该依赖于低层模块，二者都应该依赖于抽象。
        b)抽象不应该依赖于细节。细节应该依赖于抽象。
 > Don't call us, we'll call you

5. 接口隔离原则, ISP
 > 定义: 不应该强迫客户依赖于它们不用的方法。接口属于客户，不属于它所在的类层次结构。
